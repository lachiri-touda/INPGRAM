{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/sanata/Desktop/InpGram/InstaClone/src/client/App.js\";\nimport { StatusBar } from \"expo-status-bar\";\nimport React, { useEffect } from \"react\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Provider } from \"react-redux\";\nimport { store, persistor } from \"./store\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport axios from \"axios\";\nimport { setCurrentUser, logout } from \"./actions/loginActions\";\nimport RootNavigation from \"./navigation/rootNavigation\";\nimport MainScreen from \"./Screens/MainScreen\";\nvar initialLoginStatut = {\n  isLoading: true,\n  userName: null,\n  userToken: null\n};\nexport default function App() {\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isLoading = _React$useState2[0],\n      setIsLoading = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      userToken = _React$useState4[0],\n      setUserToken = _React$useState4[1];\n\n  var authContext = React.useMemo(function () {\n    return {\n      LogIn: function LogIn() {\n        setUserToken(\"ababa\");\n        setIsLoading(false);\n      },\n      signUp: function signUp() {\n        setUserToken(\"ababa\");\n        setIsLoading(false);\n      },\n      signOut: function signOut() {\n        setUserToken(null);\n        setIsLoading(false);\n      }\n    };\n  });\n  useEffect(function () {\n    setTimeout(function () {\n      setIsLoading(false);\n    }, 1000);\n  }, []);\n\n  if (isLoading) {\n    return React.createElement(View, {\n      style: {\n        flex: 1,\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }\n    }, React.createElement(ActivityIndicator, {\n      size: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  return React.createElement(Provider, {\n    store: store,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, React.createElement(PersistGate, {\n    loading: null,\n    persistor: persistor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, React.createElement(RootNavigation, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/home/sanata/Desktop/InpGram/InstaClone/src/client/App.js"],"names":["StatusBar","React","useEffect","Provider","store","persistor","PersistGate","axios","setCurrentUser","logout","RootNavigation","MainScreen","initialLoginStatut","isLoading","userName","userToken","App","useState","setIsLoading","setUserToken","authContext","useMemo","LogIn","signUp","signOut","setTimeout","flex","justifyContent","alignItems"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;;AAKA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,KAAT,EAAgBC,SAAhB;AACA,SAASC,WAAT,QAA4B,iCAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,MAAzB;AAEA,OAAOC,cAAP;AAEA,OAAOC,UAAP;AAEA,IAAMC,kBAAkB,GAAG;AACzBC,EAAAA,SAAS,EAAE,IADc;AAEzBC,EAAAA,QAAQ,EAAE,IAFe;AAGzBC,EAAAA,SAAS,EAAE;AAHc,CAA3B;AAMA,eAAe,SAASC,GAAT,GAAe;AAAA,wBACMf,KAAK,CAACgB,QAAN,CAAe,IAAf,CADN;AAAA;AAAA,MACrBJ,SADqB;AAAA,MACVK,YADU;;AAAA,yBAEMjB,KAAK,CAACgB,QAAN,CAAe,IAAf,CAFN;AAAA;AAAA,MAErBF,SAFqB;AAAA,MAEVI,YAFU;;AAI5B,MAAMC,WAAW,GAAGnB,KAAK,CAACoB,OAAN,CAAc;AAAA,WAAO;AACvCC,MAAAA,KAAK,EAAE,iBAAM;AACXH,QAAAA,YAAY,CAAC,OAAD,CAAZ;AACAD,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,OAJsC;AAKvCK,MAAAA,MAAM,EAAE,kBAAM;AACZJ,QAAAA,YAAY,CAAC,OAAD,CAAZ;AACAD,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,OARsC;AASvCM,MAAAA,OAAO,EAAE,mBAAM;AACbL,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACAD,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AAZsC,KAAP;AAAA,GAAd,CAApB;AAeAhB,EAAAA,SAAS,CAAC,YAAM;AACduB,IAAAA,UAAU,CAAC,YAAM;AACfP,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAFS,EAEP,IAFO,CAAV;AAGD,GAJQ,EAIN,EAJM,CAAT;;AAMA,MAAIL,SAAJ,EAAe;AACb,WACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEa,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,cAAc,EAAE,QAA3B;AAAqCC,QAAAA,UAAU,EAAE;AAAjD,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,iBAAD;AAAmB,MAAA,IAAI,EAAC,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD;;AAiBD,SACE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAExB,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,WAAD;AAAa,IAAA,OAAO,EAAE,IAAtB;AAA4B,IAAA,SAAS,EAAEC,SAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF;AAOD","sourcesContent":["import { StatusBar } from \"expo-status-bar\";\nimport React, { useEffect } from \"react\";\n//const mongoose = require('mongoose')\n\nimport { ActivityIndicator, StyleSheet, Text, View } from \"react-native\";\n\nimport { Provider } from \"react-redux\";\nimport { store, persistor } from \"./store\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport axios from \"axios\";\nimport { setCurrentUser, logout } from \"./actions/loginActions\";\n\nimport RootNavigation from \"./navigation/rootNavigation\";\n\nimport MainScreen from \"./Screens/MainScreen\";\n\nconst initialLoginStatut = {\n  isLoading: true,\n  userName: null,\n  userToken: null,\n};\n\nexport default function App() {\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [userToken, setUserToken] = React.useState(null);\n\n  const authContext = React.useMemo(() => ({\n    LogIn: () => {\n      setUserToken(\"ababa\");\n      setIsLoading(false);\n    },\n    signUp: () => {\n      setUserToken(\"ababa\");\n      setIsLoading(false);\n    },\n    signOut: () => {\n      setUserToken(null);\n      setIsLoading(false);\n    },\n  }));\n\n  useEffect(() => {\n    setTimeout(() => {\n      setIsLoading(false);\n    }, 1000);\n  }, []);\n\n  if (isLoading) {\n    return (\n      <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\n        <ActivityIndicator size=\"large\" />\n      </View>\n    );\n  }\n  /** if(localStorage.jwtToken){\n    if(localStorage.jwtToken){\n      axios.defaults.headers.common['Authorization']=`Bearer ${localStorage.jwtToken}`;\n    }else{\n        delete axios.defaults.headers.common['Authorization'];\n    }\n }   \n   jwt.verify(localStorage.jwtToken,'secret',function(err,decode){\n    if(err){\n        store.dispatch(logout());\n    }else{\n     //console.log(decode);\n      store.dispatch(setCurrentUser(decode));\n    }\n   });*/\n\n  return (\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <RootNavigation />\n      </PersistGate>\n    </Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}