{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/mac/mob/InstaClone/App.js\";\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useEffect } from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Provider } from 'react-redux';\nimport { store, persistor } from \"./store\";\nimport { PersistGate } from 'redux-persist/integration/react';\nimport jwt from \"jsonwebtoken\";\nimport axios from \"axios\";\nimport { setCurrentUser, logout } from \"./src/actions/loginActions\";\nimport RootNavigation from \"./src/navigation/rootNavigation\";\nimport MainScreen from \"./src/Screens/MainScreen\";\nvar initialLoginStatut = {\n  isLoading: true,\n  userName: null,\n  userToken: null\n};\nexport default function App() {\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isLoading = _React$useState2[0],\n      setIsLoading = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      userToken = _React$useState4[0],\n      setUserToken = _React$useState4[1];\n\n  var authContext = React.useMemo(function () {\n    return {\n      LogIn: function LogIn() {\n        setUserToken('ababa');\n        setIsLoading(false);\n      },\n      signUp: function signUp() {\n        setUserToken('ababa');\n        setIsLoading(false);\n      },\n      signOut: function signOut() {\n        setUserToken(null);\n        setIsLoading(false);\n      }\n    };\n  });\n  useEffect(function () {\n    setTimeout(function () {\n      setIsLoading(false);\n    }, 1000);\n  }, []);\n\n  if (isLoading) {\n    return React.createElement(View, {\n      style: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }\n    }, React.createElement(ActivityIndicator, {\n      size: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }\n    }));\n  }\n\n  return React.createElement(Provider, {\n    store: store,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, React.createElement(PersistGate, {\n    loading: null,\n    persistor: persistor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 8\n    }\n  }, React.createElement(RootNavigation, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 8\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/mac/mob/InstaClone/App.js"],"names":["StatusBar","React","useEffect","Provider","store","persistor","PersistGate","jwt","axios","setCurrentUser","logout","RootNavigation","MainScreen","initialLoginStatut","isLoading","userName","userToken","App","useState","setIsLoading","setUserToken","authContext","useMemo","LogIn","signUp","signOut","setTimeout","flex","justifyContent","alignItems"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAgC,OAAhC;;;;;AAKA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,KAAT,EAAgBC,SAAhB;AACA,SAASC,WAAT,QAA4B,iCAA5B;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,cAAR,EAAuBC,MAAvB;AAEA,OAAOC,cAAP;AAEA,OAAOC,UAAP;AAGA,IAAMC,kBAAkB,GAAE;AACxBC,EAAAA,SAAS,EAAE,IADa;AAExBC,EAAAA,QAAQ,EAAE,IAFc;AAGxBC,EAAAA,SAAS,EAAE;AAHa,CAA1B;AAOA,eAAe,SAASC,GAAT,GAAe;AAAA,wBAEMhB,KAAK,CAACiB,QAAN,CAAe,IAAf,CAFN;AAAA;AAAA,MAErBJ,SAFqB;AAAA,MAEVK,YAFU;;AAAA,yBAGMlB,KAAK,CAACiB,QAAN,CAAe,IAAf,CAHN;AAAA;AAAA,MAGrBF,SAHqB;AAAA,MAGVI,YAHU;;AAK5B,MAAMC,WAAW,GAAGpB,KAAK,CAACqB,OAAN,CAAc;AAAA,WAAO;AACvCC,MAAAA,KAAK,EAAE,iBAAM;AACXH,QAAAA,YAAY,CAAC,OAAD,CAAZ;AACAD,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,OAJsC;AAKvCK,MAAAA,MAAM,EAAE,kBAAM;AACZJ,QAAAA,YAAY,CAAC,OAAD,CAAZ;AACAD,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,OARsC;AASvCM,MAAAA,OAAO,EAAE,mBAAM;AACbL,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACAD,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AAZsC,KAAP;AAAA,GAAd,CAApB;AAgBAjB,EAAAA,SAAS,CAAC,YAAM;AACdwB,IAAAA,UAAU,CAAC,YAAM;AACfP,MAAAA,YAAY,CAAC,KAAD,CAAZ;AAAqB,KADb,EACc,IADd,CAAV;AAEC,GAHM,EAGL,EAHK,CAAT;;AAKA,MAAIL,SAAJ,EAAc;AACZ,WACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACa,QAAAA,IAAI,EAAC,CAAN;AAAUC,QAAAA,cAAc,EAAC,QAAzB;AAAkCC,QAAAA,UAAU,EAAC;AAA7C,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,iBAAD;AAAmB,MAAA,IAAI,EAAC,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CADF;AAKD;;AAoBD,SACE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEzB,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,oBAAC,WAAD;AAAa,IAAA,OAAO,EAAE,IAAtB;AAA4B,IAAA,SAAS,EAAEC,SAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CADH,CADF;AASD","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React,{  useEffect }from 'react';\n//const mongoose = require('mongoose')\n\nimport { ActivityIndicator,StyleSheet, Text, View } from 'react-native';\n\nimport { Provider } from 'react-redux';\nimport { store, persistor } from './store';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport jwt from \"jsonwebtoken\";\nimport axios from \"axios\";\nimport {setCurrentUser,logout} from \"./src/actions/loginActions\"\n\nimport RootNavigation from './src/navigation/rootNavigation';\n\nimport MainScreen from './src/Screens/MainScreen'\n\n\nconst initialLoginStatut ={\n  isLoading: true,\n  userName: null,\n  userToken: null,\n}\n\n\nexport default function App() {\n\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [userToken, setUserToken] = React.useState(null);\n\n  const authContext = React.useMemo(() => ({\n    LogIn: () => {\n      setUserToken('ababa');\n      setIsLoading(false);\n    },\n    signUp: () => {\n      setUserToken('ababa');\n      setIsLoading(false);\n    },\n    signOut: () => {\n      setUserToken(null);\n      setIsLoading(false);\n    },\n    \n  }));\n\n  useEffect(() => {\n    setTimeout(() => {\n      setIsLoading(false);},1000);\n    },[]);\n\n  if (isLoading){\n    return (\n      <View style={{flex:1 , justifyContent:'center',alignItems:'center'}}>\n      <ActivityIndicator size=\"large\" /> \n      </View>\n    );\n  }\n /** if(localStorage.jwtToken){\n    if(localStorage.jwtToken){\n      axios.defaults.headers.common['Authorization']=`Bearer ${localStorage.jwtToken}`;\n    }else{\n        delete axios.defaults.headers.common['Authorization'];\n    }\n }   \n   jwt.verify(localStorage.jwtToken,'secret',function(err,decode){\n    if(err){\n        store.dispatch(logout());\n    }else{\n     //console.log(decode);\n      store.dispatch(setCurrentUser(decode));\n    }\n   });*/\n\n    \n\n\n  return (\n    <Provider store={store}>\n       <PersistGate loading={null} persistor={persistor}>\n       <RootNavigation/>\n       </PersistGate>\n    </Provider>\n    \n\n  );\n}\n"]},"metadata":{},"sourceType":"module"}