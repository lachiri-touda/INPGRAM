{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/sanata/Desktop/InpGram/InstaClone/src/Screens/Profile/addPost.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport ActionButton from \"react-native-action-button\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport { InputField, InputWrapper, AddImage, SubmitBtn, SubmitBtnText, StatusWrapper } from \"./addPostStyle\";\n\nvar AddPostScreen = function AddPostScreen() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      uploading = _useState4[0],\n      setUploading = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      transferred = _useState6[0],\n      setTransferred = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      post = _useState8[0],\n      setPost = _useState8[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$ImagePicker$re, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(Platform.OS !== \"web\")) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(ImagePicker.requestMediaLibraryPermissionsAsync());\n\n            case 3:\n              _await$ImagePicker$re = _context.sent;\n              status = _await$ImagePicker$re.status;\n\n              if (status !== \"granted\") {\n                alert(\"Sorry, we need camera roll permissions to make this work!\");\n              }\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var takePhotoFromCamera = function takePhotoFromCamera() {\n    ImagePicker.launchCameraAsync({\n      width: 1200,\n      height: 780,\n      cropping: true\n    }).then(function (image) {\n      console.log(image);\n      var imageUri = Platform.OS === \"ios\" ? image.sourceURL : image.path;\n      setImage(image.uri);\n    });\n  };\n\n  var choosePhotoFromLibrary = function choosePhotoFromLibrary() {\n    var result;\n    return _regeneratorRuntime.async(function choosePhotoFromLibrary$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.All,\n              allowsEditing: true,\n              aspect: [4, 3],\n              quality: 1\n            }));\n\n          case 2:\n            result = _context2.sent;\n            console.log(result);\n\n            if (!result.cancelled) {\n              setImage(result.uri);\n            }\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var submitPost = function submitPost() {\n    var imageUrl;\n    return _regeneratorRuntime.async(function submitPost$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(uploadImage());\n\n          case 2:\n            imageUrl = _context3.sent;\n            console.log(\"Image Url: \", imageUrl);\n            console.log(\"Post: \", post);\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var uploadImage = function uploadImage() {\n    return _regeneratorRuntime.async(function uploadImage$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 5\n    }\n  }, React.createElement(InputWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }, image != null ? React.createElement(AddImage, {\n    source: {\n      uri: image\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 26\n    }\n  }) : null, React.createElement(InputField, {\n    placeholder: \"What's on your mind?\",\n    multiline: true,\n    numberOfLines: 4,\n    value: post,\n    onChangeText: function onChangeText(content) {\n      return setPost(content);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }\n  }), uploading ? React.createElement(StatusWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }\n  }, transferred, \" % Completed!\"), React.createElement(ActivityIndicator, {\n    size: \"large\",\n    color: \"#0000ff\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }\n  })) : React.createElement(SubmitBtn, {\n    onPress: submitPost,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 11\n    }\n  }, React.createElement(SubmitBtnText, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }\n  }, \"Post\"))), React.createElement(ActionButton, {\n    buttonColor: \"#2e64e5\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }\n  }, React.createElement(ActionButton.Item, {\n    buttonColor: \"#9b59b6\",\n    title: \"Take Photo\",\n    onPress: takePhotoFromCamera,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }\n  }, React.createElement(Icon, {\n    name: \"camera-outline\",\n    style: styles.actionButtonIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 11\n    }\n  })), React.createElement(ActionButton.Item, {\n    buttonColor: \"#3498db\",\n    title: \"Choose Photo\",\n    onPress: choosePhotoFromLibrary,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }\n  }, React.createElement(Icon, {\n    name: \"md-images-outline\",\n    style: styles.actionButtonIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default AddPostScreen;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  actionButtonIcon: {\n    fontSize: 20,\n    height: 22,\n    color: \"white\"\n  }\n});","map":{"version":3,"sources":["/home/sanata/Desktop/InpGram/InstaClone/src/Screens/Profile/addPost.js"],"names":["React","useState","useContext","useEffect","ActionButton","Icon","ImagePicker","InputField","InputWrapper","AddImage","SubmitBtn","SubmitBtnText","StatusWrapper","AddPostScreen","image","setImage","uploading","setUploading","transferred","setTransferred","post","setPost","Platform","OS","requestMediaLibraryPermissionsAsync","status","alert","takePhotoFromCamera","launchCameraAsync","width","height","cropping","then","console","log","imageUri","sourceURL","path","uri","choosePhotoFromLibrary","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","allowsEditing","aspect","quality","result","cancelled","submitPost","uploadImage","imageUrl","styles","container","content","actionButtonIcon","StyleSheet","create","flex","alignItems","justifyContent","fontSize","color"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\nimport {\n  View,\n  Text,\n  Platform,\n  StyleSheet,\n  Alert,\n  ActivityIndicator,\n} from \"react-native\";\nimport ActionButton from \"react-native-action-button\";\n\nimport Icon from \"react-native-vector-icons/Ionicons\";\nimport * as ImagePicker from \"expo-image-picker\";\n//import storage from \"@react-native-firebase/storage\";\n//import firestore from \"@react-native-firebase/firestore\";\n\nimport {\n  InputField,\n  InputWrapper,\n  AddImage,\n  SubmitBtn,\n  SubmitBtnText,\n  StatusWrapper,\n} from \"./addPostStyle\";\n\n//import { AuthContext } from \"../navigation/AuthProvider\";\n\nconst AddPostScreen = () => {\n  // const { user, logout } = useContext(AuthContext);\n\n  const [image, setImage] = useState(null);\n  const [uploading, setUploading] = useState(false);\n  const [transferred, setTransferred] = useState(0);\n  const [post, setPost] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      if (Platform.OS !== \"web\") {\n        const { status } =\n          await ImagePicker.requestMediaLibraryPermissionsAsync();\n        if (status !== \"granted\") {\n          alert(\"Sorry, we need camera roll permissions to make this work!\");\n        }\n      }\n    })();\n  }, []);\n\n  const takePhotoFromCamera = () => {\n    ImagePicker.launchCameraAsync({\n      width: 1200,\n      height: 780,\n      cropping: true,\n    }).then((image) => {\n      console.log(image);\n      const imageUri = Platform.OS === \"ios\" ? image.sourceURL : image.path;\n      setImage(image.uri);\n    });\n  };\n\n  const choosePhotoFromLibrary = async () => {\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      allowsEditing: true,\n      aspect: [4, 3],\n      quality: 1,\n    });\n\n    console.log(result);\n\n    if (!result.cancelled) {\n      setImage(result.uri);\n    }\n  };\n\n  const submitPost = async () => {\n    const imageUrl = await uploadImage();\n    console.log(\"Image Url: \", imageUrl);\n    console.log(\"Post: \", post);\n\n    /* firestore()\n      .collection(\"posts\")\n      .add({\n        userId: user.uid,\n        post: post,\n        postImg: imageUrl,\n        postTime: firestore.Timestamp.fromDate(new Date()),\n        likes: null,\n        comments: null,\n      })\n      .then(() => {\n        console.log(\"Post Added!\");\n        Alert.alert(\n          \"Post published!\",\n          \"Your post has been published Successfully!\"\n        );\n        setPost(null);\n      })\n      .catch((error) => {\n        console.log(\n          \"Something went wrong with added post to firestore.\",\n          error\n        );\n      });*/\n  };\n\n  const uploadImage = async () => {\n    /*\n    if (image == null) {\n      return null;\n    }\n    const uploadUri = image;\n    let filename = uploadUri.substring(uploadUri.lastIndexOf(\"/\") + 1);\n\n    // Add timestamp to File Name\n    const extension = filename.split(\".\").pop();\n    const name = filename.split(\".\").slice(0, -1).join(\".\");\n    filename = name + Date.now() + \".\" + extension;\n\n    setUploading(true);\n    setTransferred(0);\n\n    const storageRef = storage().ref(`photos/${filename}`);\n    const task = storageRef.putFile(uploadUri);\n\n    // Set transferred state\n    task.on(\"state_changed\", (taskSnapshot) => {\n      console.log(\n        `${taskSnapshot.bytesTransferred} transferred out of ${taskSnapshot.totalBytes}`\n      );\n\n      setTransferred(\n        Math.round(taskSnapshot.bytesTransferred / taskSnapshot.totalBytes) *\n          100\n      );\n    });\n\n    try {\n      await task;\n\n      const url = await storageRef.getDownloadURL();\n\n      setUploading(false);\n      setImage(null);\n\n      // Alert.alert(\n      //   'Image uploaded!',\n      //   'Your image has been uploaded to the Firebase Cloud Storage Successfully!',\n      // );\n      return url;\n    } catch (e) {\n      console.log(e);\n      return null;\n    }*/\n  };\n\n  return (\n    <View style={styles.container}>\n      <InputWrapper>\n        {image != null ? <AddImage source={{ uri: image }} /> : null}\n\n        <InputField\n          placeholder=\"What's on your mind?\"\n          multiline\n          numberOfLines={4}\n          value={post}\n          onChangeText={(content) => setPost(content)}\n        />\n        {uploading ? (\n          <StatusWrapper>\n            <Text>{transferred} % Completed!</Text>\n            <ActivityIndicator size=\"large\" color=\"#0000ff\" />\n          </StatusWrapper>\n        ) : (\n          <SubmitBtn onPress={submitPost}>\n            <SubmitBtnText>Post</SubmitBtnText>\n          </SubmitBtn>\n        )}\n      </InputWrapper>\n      <ActionButton buttonColor=\"#2e64e5\">\n        <ActionButton.Item\n          buttonColor=\"#9b59b6\"\n          title=\"Take Photo\"\n          onPress={takePhotoFromCamera}\n        >\n          <Icon name=\"camera-outline\" style={styles.actionButtonIcon} />\n        </ActionButton.Item>\n        <ActionButton.Item\n          buttonColor=\"#3498db\"\n          title=\"Choose Photo\"\n          onPress={choosePhotoFromLibrary}\n        >\n          <Icon name=\"md-images-outline\" style={styles.actionButtonIcon} />\n        </ActionButton.Item>\n      </ActionButton>\n    </View>\n  );\n};\n\nexport default AddPostScreen;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  actionButtonIcon: {\n    fontSize: 20,\n    height: 22,\n    color: \"white\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}