{"ast":null,"code":"import axios from \"axios\";\nimport deviceStorage from \"./deviceStorege\";\nimport SweetAlert from \"react-native-sweet-alert\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nexport var LOGIN_REQUEST = \"LOGIN_REQUEST\";\nexport var LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport var LOGIN_FAILURE = \"LOGIN_FAILURE\";\nexport var SET_AUTH_TOKEN = \"SET_AUTH_TOKEN\";\nexport var SET_CURRENT_USER = \"SET_CURRENT_USER\";\nexport var LOGOUT_USER = \"LOGOUT_USER\";\nimport { AsyncStorage } from \"@react-native-community/async-storage\";\nexport var loginRequest = function loginRequest() {\n  return {\n    type: LOGIN_REQUEST\n  };\n};\nexport var loginSuccess = function loginSuccess(loginData) {\n  return {\n    type: LOGIN_SUCCESS,\n    payload: loginData\n  };\n};\nexport var loginFailure = function loginFailure(errMsg) {\n  return {\n    type: LOGIN_FAILURE,\n    payload: errMsg\n  };\n};\nexport var setAuthToken = function setAuthToken(authToken) {\n  return {\n    type: SET_AUTH_TOKEN,\n    payload: authToken\n  };\n};\nexport var setCurrentUser = function setCurrentUser(userId) {\n  return {\n    type: SET_CURRENT_USER,\n    payload: userId\n  };\n};\nexport var logout = function logout() {\n  return function (dispatch) {\n    AsyncStorage.removeItem(\"token\");\n    AsyncStorage.removeItem(\"Id\");\n    delete axios.defaults.headers.common[\"Authorization\"];\n    dispatch(setCurrentUser({}));\n    dispatch({\n      type: LOGOUT_USER\n    });\n    window.location.href = \"/\";\n  };\n};\nexport var login = function login(loginData) {\n  return function (dispatch) {\n    dispatch(loginRequest());\n    axios({\n      method: \"post\",\n      url: \"/login\",\n      baseURL: \"http://10.200.14.241:3000\",\n      data: {\n        email: loginData.email,\n        password: loginData.password\n      }\n    }).then(function (res) {\n      if (res.data.value) {\n        dispatch(loginSuccess(res.data));\n        console.log(res.data.token);\n      } else {\n        SweetAlert.showAlertWithOptions({\n          title: \"title: res.data.message\"\n        });\n        dispatch(loginFailure(res.data.message));\n      }\n    }).catch(function (err) {\n      console.log(err.message);\n      dispatch(loginFailure(\"User Not Found!\"));\n    });\n  };\n};","map":{"version":3,"sources":["/home/sanata/Desktop/InpGram/InstaClone/src/actions/loginActions.js"],"names":["axios","deviceStorage","SweetAlert","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","SET_AUTH_TOKEN","SET_CURRENT_USER","LOGOUT_USER","AsyncStorage","loginRequest","type","loginSuccess","loginData","payload","loginFailure","errMsg","setAuthToken","authToken","setCurrentUser","userId","logout","dispatch","removeItem","defaults","headers","common","window","location","href","login","method","url","baseURL","data","email","password","then","res","value","console","log","token","showAlertWithOptions","title","message","catch","err"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n//import store from '../../../Store';\nimport deviceStorage from \"./deviceStorege\";\nimport SweetAlert from \"react-native-sweet-alert\";\nimport { Alert } from \"react-native\";\n// action types\nexport const LOGIN_REQUEST = \"LOGIN_REQUEST\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAILURE = \"LOGIN_FAILURE\";\nexport const SET_AUTH_TOKEN = \"SET_AUTH_TOKEN\";\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";\nexport const LOGOUT_USER = \"LOGOUT_USER\";\nimport { AsyncStorage } from \"@react-native-community/async-storage\";\n\n// action creators\nexport const loginRequest = () => {\n  return {\n    type: LOGIN_REQUEST,\n  };\n};\nexport const loginSuccess = (loginData) => {\n  return {\n    type: LOGIN_SUCCESS,\n    payload: loginData,\n  };\n};\n\nexport const loginFailure = (errMsg) => {\n  return {\n    type: LOGIN_FAILURE,\n    payload: errMsg,\n  };\n};\n\n// save the auth token to redux store\nexport const setAuthToken = (authToken) => {\n  return {\n    type: SET_AUTH_TOKEN,\n    payload: authToken,\n  };\n};\nexport const setCurrentUser = (userId) => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: userId,\n  };\n};\n\nexport const logout = () => {\n  return function (dispatch) {\n    AsyncStorage.removeItem(\"token\");\n\n    AsyncStorage.removeItem(\"Id\");\n\n    // setAuthenticationToken(false);\n    delete axios.defaults.headers.common[\"Authorization\"];\n    dispatch(setCurrentUser({}));\n\n    dispatch({\n      type: LOGOUT_USER,\n    });\n    window.location.href = \"/\";\n  };\n};\n\n// async impure action creator enabled by redux-thunk\nexport const login = (loginData) => {\n  return (dispatch) => {\n    dispatch(loginRequest());\n    //const loginUri = 'http://localhost:3000/login';\n    axios({\n      method: \"post\",\n      url: \"/login\",\n      //baseURL: \"http://localhost:3000\",\n      baseURL: \"http://10.200.14.241:3000\",\n\n      data: {\n        email: loginData.email,\n        password: loginData.password,\n      },\n    })\n      .then((res) => {\n        if (res.data.value) {\n          dispatch(loginSuccess(res.data));\n\n          console.log(res.data.token);\n        } else {\n          SweetAlert.showAlertWithOptions({\n            title: \"title: res.data.message\",\n            //text: ,\n            // icon: \"warning\",\n          });\n          dispatch(loginFailure(res.data.message));\n        }\n      })\n\n      .catch((err) => {\n        console.log(err.message);\n\n        dispatch(loginFailure(\"User Not Found!\"));\n        //console.log(\"loginAction.js, Request Error: \", err.message);\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}