{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from \"axios\";\nimport deviceStorage from \"./deviceStorege\";\nimport SweetAlert from \"react-native-sweet-alert\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nexport var LOGIN_REQUEST = \"LOGIN_REQUEST\";\nexport var LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport var LOGIN_FAILURE = \"LOGIN_FAILURE\";\nexport var SET_AUTH_TOKEN = \"SET_AUTH_TOKEN\";\nexport var SET_CURRENT_USER = \"SET_CURRENT_USER\";\nexport var LOGOUT_USER = \"LOGOUT_USER\";\nimport { AsyncStorage } from \"@react-native-community/async-storage\";\nimport { baseURL } from \"../constants\";\nexport var loginRequest = function loginRequest() {\n  return {\n    type: LOGIN_REQUEST\n  };\n};\nexport var loginSuccess = function loginSuccess(loginData) {\n  return {\n    type: LOGIN_SUCCESS,\n    payload: loginData\n  };\n};\nexport var loginFailure = function loginFailure(errMsg) {\n  return {\n    type: LOGIN_FAILURE,\n    payload: errMsg\n  };\n};\nexport var setAuthToken = function setAuthToken(authToken) {\n  return {\n    type: SET_AUTH_TOKEN,\n    payload: authToken\n  };\n};\nexport var setCurrentUser = function setCurrentUser(userId) {\n  return {\n    type: SET_CURRENT_USER,\n    payload: userId\n  };\n};\nexport var clearAppData = function clearAppData() {\n  return _regeneratorRuntime.async(function clearAppData$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          return _context2.abrupt(\"return\", function _callee(dispatch) {\n            var keys;\n            return _regeneratorRuntime.async(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    _context.next = 3;\n                    return _regeneratorRuntime.awrap(AsyncStorage.getAllKeys());\n\n                  case 3:\n                    keys = _context.sent;\n                    _context.next = 6;\n                    return _regeneratorRuntime.awrap(AsyncStorage.multiRemove(keys));\n\n                  case 6:\n                    _context.next = 11;\n                    break;\n\n                  case 8:\n                    _context.prev = 8;\n                    _context.t0 = _context[\"catch\"](0);\n                    console.error(\"Error clearing app data.\");\n\n                  case 11:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, null, null, [[0, 8]], Promise);\n          });\n\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var logout = function logout() {\n  return function (dispatch) {\n    dispatch(setCurrentUser({}));\n    dispatch({\n      type: LOGOUT_USER\n    });\n  };\n};\nexport var login = function login(loginData) {\n  return function (dispatch) {\n    dispatch(loginRequest());\n    axios({\n      method: \"post\",\n      url: \"/login\",\n      baseURL: baseURL,\n      data: {\n        email: loginData.email,\n        password: loginData.password\n      }\n    }).then(function (res) {\n      if (res.data.value) {\n        dispatch(loginSuccess(res.data));\n        console.log(res.data.token);\n      } else {\n        dispatch(loginFailure(res.data.message));\n      }\n    }).catch(function (err) {\n      console.log(err.message);\n      dispatch(loginFailure(\"User Not Found!\"));\n    });\n  };\n};","map":{"version":3,"sources":["/home/sanata/Desktop/InpGram/InstaClone/src/actions/loginActions.js"],"names":["axios","deviceStorage","SweetAlert","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","SET_AUTH_TOKEN","SET_CURRENT_USER","LOGOUT_USER","AsyncStorage","baseURL","loginRequest","type","loginSuccess","loginData","payload","loginFailure","errMsg","setAuthToken","authToken","setCurrentUser","userId","clearAppData","dispatch","getAllKeys","keys","multiRemove","console","error","logout","login","method","url","data","email","password","then","res","value","log","token","message","catch","err"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,aAAP;AACA,OAAOC,UAAP,MAAuB,0BAAvB;;AAGA,OAAO,IAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,IAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,IAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,WAAW,GAAG,aAApB;AACP,SAASC,YAAT,QAA6B,uCAA7B;AACA,SAASC,OAAT;AAGA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AAChC,SAAO;AACLC,IAAAA,IAAI,EAAET;AADD,GAAP;AAGD,CAJM;AAKP,OAAO,IAAMU,YAAY,GAAG,SAAfA,YAAe,CAACC,SAAD,EAAe;AACzC,SAAO;AACLF,IAAAA,IAAI,EAAER,aADD;AAELW,IAAAA,OAAO,EAAED;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAME,YAAY,GAAG,SAAfA,YAAe,CAACC,MAAD,EAAY;AACtC,SAAO;AACLL,IAAAA,IAAI,EAAEP,aADD;AAELU,IAAAA,OAAO,EAAEE;AAFJ,GAAP;AAID,CALM;AAQP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,SAAD,EAAe;AACzC,SAAO;AACLP,IAAAA,IAAI,EAAEN,cADD;AAELS,IAAAA,OAAO,EAAEI;AAFJ,GAAP;AAID,CALM;AAMP,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,MAAD,EAAY;AACxC,SAAO;AACLT,IAAAA,IAAI,EAAEL,gBADD;AAELQ,IAAAA,OAAO,EAAEM;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe;AAAA;AAAA;AAAA;AAAA;AAAA,4CACnB,iBAAgBC,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAEgBd,YAAY,CAACe,UAAb,EAFhB;;AAAA;AAEGC,oBAAAA,IAFH;AAAA;AAAA,qDAGGhB,YAAY,CAACiB,WAAb,CAAyBD,IAAzB,CAHH;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAKHE,oBAAAA,OAAO,CAACC,KAAR,CAAc,0BAAd;;AALG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;AAWP,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AAC1B,SAAO,UAAUN,QAAV,EAAoB;AAEzBA,IAAAA,QAAQ,CAACH,cAAc,CAAC,EAAD,CAAf,CAAR;AAEAG,IAAAA,QAAQ,CAAC;AACPX,MAAAA,IAAI,EAAEJ;AADC,KAAD,CAAR;AAGD,GAPD;AAQD,CATM;AAYP,OAAO,IAAMsB,KAAK,GAAG,SAARA,KAAQ,CAAChB,SAAD,EAAe;AAClC,SAAO,UAACS,QAAD,EAAc;AACnBA,IAAAA,QAAQ,CAACZ,YAAY,EAAb,CAAR;AAEAX,IAAAA,KAAK,CAAC;AACJ+B,MAAAA,MAAM,EAAE,MADJ;AAEJC,MAAAA,GAAG,EAAE,QAFD;AAGJtB,MAAAA,OAAO,EAAEA,OAHL;AAKJuB,MAAAA,IAAI,EAAE;AACJC,QAAAA,KAAK,EAAEpB,SAAS,CAACoB,KADb;AAEJC,QAAAA,QAAQ,EAAErB,SAAS,CAACqB;AAFhB;AALF,KAAD,CAAL,CAUGC,IAVH,CAUQ,UAACC,GAAD,EAAS;AACb,UAAIA,GAAG,CAACJ,IAAJ,CAASK,KAAb,EAAoB;AAClBf,QAAAA,QAAQ,CAACV,YAAY,CAACwB,GAAG,CAACJ,IAAL,CAAb,CAAR;AAEAN,QAAAA,OAAO,CAACY,GAAR,CAAYF,GAAG,CAACJ,IAAJ,CAASO,KAArB;AACD,OAJD,MAIO;AAMLjB,QAAAA,QAAQ,CAACP,YAAY,CAACqB,GAAG,CAACJ,IAAJ,CAASQ,OAAV,CAAb,CAAR;AACD;AACF,KAvBH,EAyBGC,KAzBH,CAyBS,UAACC,GAAD,EAAS;AACdhB,MAAAA,OAAO,CAACY,GAAR,CAAYI,GAAG,CAACF,OAAhB;AAEAlB,MAAAA,QAAQ,CAACP,YAAY,CAAC,iBAAD,CAAb,CAAR;AAED,KA9BH;AA+BD,GAlCD;AAmCD,CApCM","sourcesContent":["import axios from \"axios\";\n//import store from '../../../Store';\nimport deviceStorage from \"./deviceStorege\";\nimport SweetAlert from \"react-native-sweet-alert\";\nimport { Alert } from \"react-native\";\n// action types\nexport const LOGIN_REQUEST = \"LOGIN_REQUEST\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAILURE = \"LOGIN_FAILURE\";\nexport const SET_AUTH_TOKEN = \"SET_AUTH_TOKEN\";\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";\nexport const LOGOUT_USER = \"LOGOUT_USER\";\nimport { AsyncStorage } from \"@react-native-community/async-storage\";\nimport { baseURL } from \"../constants\";\n\n// action creators\nexport const loginRequest = () => {\n  return {\n    type: LOGIN_REQUEST,\n  };\n};\nexport const loginSuccess = (loginData) => {\n  return {\n    type: LOGIN_SUCCESS,\n    payload: loginData,\n  };\n};\n\nexport const loginFailure = (errMsg) => {\n  return {\n    type: LOGIN_FAILURE,\n    payload: errMsg,\n  };\n};\n\n// save the auth token to redux store\nexport const setAuthToken = (authToken) => {\n  return {\n    type: SET_AUTH_TOKEN,\n    payload: authToken,\n  };\n};\nexport const setCurrentUser = (userId) => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: userId,\n  };\n};\n\nexport const clearAppData = async function () {\n  return async function (dispatch) {\n    try {\n      const keys = await AsyncStorage.getAllKeys();\n      await AsyncStorage.multiRemove(keys);\n    } catch (error) {\n      console.error(\"Error clearing app data.\");\n    }\n  };\n};\n\nexport const logout = () => {\n  return function (dispatch) {\n    // setAuthenticationToken(false);\n    dispatch(setCurrentUser({}));\n\n    dispatch({\n      type: LOGOUT_USER,\n    });\n  };\n};\n\n// async impure action creator enabled by redux-thunk\nexport const login = (loginData) => {\n  return (dispatch) => {\n    dispatch(loginRequest());\n    //const loginUri = 'http://localhost:3000/login';\n    axios({\n      method: \"post\",\n      url: \"/login\",\n      baseURL: baseURL,\n\n      data: {\n        email: loginData.email,\n        password: loginData.password,\n      },\n    })\n      .then((res) => {\n        if (res.data.value) {\n          dispatch(loginSuccess(res.data));\n\n          console.log(res.data.token);\n        } else {\n          /*SweetAlert.showAlertWithOptions({\n            title: \"title: res.data.message\",\n            //text: ,\n            // icon: \"warning\",\n          });*/\n          dispatch(loginFailure(res.data.message));\n        }\n      })\n\n      .catch((err) => {\n        console.log(err.message);\n\n        dispatch(loginFailure(\"User Not Found!\"));\n        //console.log(\"loginAction.js, Request Error: \", err.message);\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}